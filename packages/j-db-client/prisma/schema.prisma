datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id                                Int                                 @id @default(autoincrement())
  name                              String?
  email                             String                              @unique
  handle                            String                              @unique
  auth                              Auth?
  userRole                          UserRole                            @default(USER)
  bio                               String?
  city                              String?
  country                           String?
  posts                             Post[]
  subscription                      MembershipSubscription?
  socialMedia                       SocialMedia?
  languagesNative                   LanguageNative[]
  languagesLearning                 LanguageLearning[]
  languages                         LanguageRelation[]
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  userInterests                     UserInterest[]
  pageView                          PageView[]
  profileImage                      String?
  threadSubscriptions               ThreadSubscription[]
  postLikes                         PostLike[]
  commentThanks                     CommentThanks[]
  postCommentThanks                 PostCommentThanks[]
  comments                          Comment[]
  postComments                      PostComment[]
  badges                            UserBadge[]
  followedBy                        User[]                              @relation("UserFollows", references: [id])
  following                         User[]                              @relation("UserFollows", references: [id])
  postCommentSubscriptions          PostCommentSubscription[]
  PendingNotification               PendingNotification[]
  MembershipSubscriptionTransaction MembershipSubscriptionTransaction[]
}

model Auth {
  id               Int     @id @default(autoincrement())
  user             User    @relation(fields: [userId], references: [id])
  userId           Int     @unique
  password         String
  resetToken       String?
  resetTokenExpiry Int?
}

model LanguageLearning {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int
  createdAt  DateTime @default(now())

  @@unique([userId, languageId])
}

model LanguageRelation {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  language   Language      @relation(fields: [languageId], references: [id])
  languageId Int
  createdAt  DateTime      @default(now())
  level      LanguageLevel

  @@unique([userId, languageId])
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

model LanguageNative {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int
  createdAt  DateTime @default(now())

  @@unique([userId, languageId])
}

model SocialMedia {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
  website   String
  youtube   String
  instagram String
  facebook  String
}

model Post {
  id                       Int                       @id @default(autoincrement())
  title                    String
  body                     String
  bodySrc                  String                    @default("")
  excerpt                  String
  status                   PostStatus                @default(DRAFT)
  images                   Image[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  publishedAt              DateTime?
  author                   User                      @relation(fields: [authorId], references: [id])
  authorId                 Int
  readTime                 Int                       @default(1)
  likes                    PostLike[]
  language                 Language                  @relation(fields: [languageId], references: [id])
  languageId               Int
  publishedLanguageLevel   LanguageLevel             @default(BEGINNER)
  longitude                Float?
  latitude                 Float?
  threads                  Thread[]
  postTopics               PostTopic[]
  postComments             PostComment[]
  postCommentSubscriptions PostCommentSubscription[]
  PendingNotification      PendingNotification[]
}

model Language {
  id            Int                @id @default(autoincrement())
  posts         Post[]
  name          String
  devName       String?
  dialect       String?
  nativeUsers   LanguageNative[]
  learningUsers LanguageLearning[]

  LanguageRelation LanguageRelation[]
  @@unique([name, dialect])
}

model Topic {
  id                Int                @id @default(autoincrement())
  devName           String
  userInterests     UserInterest[]
  postTopics        PostTopic[]
  prompt            Prompt[]
  topicTranslations TopicTranslation[]
}

model TopicTranslation {
  id         Int        @id @default(autoincrement())
  uiLanguage UILanguage
  name       String
  topic      Topic      @relation(fields: [topicId], references: [id])
  topicId    Int

  @@unique([uiLanguage, topicId])
}

model UserInterest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   Int
  createdAt DateTime @default(now())

  @@unique([userId, topicId])
}

model PostTopic {
  id      Int   @id @default(autoincrement())
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int

  @@unique([postId, topicId])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@unique([authorId, postId])
}

model CommentThanks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int

  PendingNotification PendingNotification[]
  @@unique([authorId, commentId])
}

model PostCommentThanks {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  author        User         @relation(fields: [authorId], references: [id])
  authorId      Int
  PostComment   PostComment? @relation(fields: [postCommentId], references: [id])
  postCommentId Int?

  PendingNotification PendingNotification[]
  @@unique([authorId, postCommentId])
}

model Comment {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  body                String
  author              User                  @relation(fields: [authorId], references: [id])
  authorId            Int
  thread              Thread                @relation(fields: [threadId], references: [id])
  threadId            Int
  thanks              CommentThanks[]
  PendingNotification PendingNotification[]
}

model PostComment {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  body                String
  author              User                  @relation(fields: [authorId], references: [id])
  authorId            Int
  post                Post                  @relation(fields: [postId], references: [id])
  postId              Int
  thanks              PostCommentThanks[]
  PendingNotification PendingNotification[]
}

model Thread {
  id                 Int                  @id @default(autoincrement())
  startIndex         Int
  endIndex           Int
  archived           Boolean              @default(false)
  highlightedContent String
  post               Post                 @relation(fields: [postId], references: [id])
  postId             Int
  comments           Comment[]
  subscriptions      ThreadSubscription[]
}

model Image {
  id        Int       @id @default(autoincrement())
  smallSize String
  largeSize String
  imageRole ImageRole
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?
}

model Prompt {
  id      Int    @id @default(autoincrement())
  text    String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId Int
}

model ThreadSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int

  @@unique([userId, threadId])
}

model PostCommentSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@unique([userId, postId])
}

// TODO: Open questions:
// • Should we have a description field on either of these models?
// • Should we not have a relationship or something that indicates which subscription
//   or subscription type a transaction is for?
// • Should we store the stripe charge.id so that we always have a direct
//   reference to the stripe charge?

model MembershipSubscription {
  id        Int                        @id @default(autoincrement())
  type      MembershipSubscriptionType
  price     Int
  user      User                       @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime?
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
}

model MembershipSubscriptionTransaction {
  id          Int      @id @default(autoincrement())
  chargeCents Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageView {
  id                  Int      @id @default(autoincrement())
  user                User?    @relation(fields: [userId], references: [id])
  userId              Int?
  sessionId           String
  pageName            String
  timestamp           DateTime @default(now())
  utmSource           String?
  // TODO (robin-macpherson): find user agent string parsing library and store each part separately
  user_agent_string   String
  user_agent_language String
}

model UserBadge {
  id        Int       @id @default(autoincrement())
  type      BadgeType
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([userId, type])
}

model PendingNotification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int

  post                Post?              @relation(fields: [postId], references: [id])
  postId              Int?
  postCommentThanks   PostCommentThanks? @relation(fields: [postCommentThanksId], references: [id])
  postCommentThanksId Int?
  commentThanks       CommentThanks?     @relation(fields: [commentThanksId], references: [id])
  commentThanksId     Int?
  postComment         PostComment?       @relation(fields: [postCommentId], references: [id])
  postCommentId       Int?
  comment             Comment?           @relation(fields: [commentId], references: [id])
  commentId           Int?
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum ImageRole {
  HEADLINE
  INLINE
}

enum UILanguage {
  ENGLISH
  GERMAN
}

enum BadgeType {
  ALPHA_USER
  BETA_USER
  TEN_POSTS
  ONEHUNDRED_POSTS
  CODE_CONTRIBUTOR
}

enum NotificationType {
  THREAD_COMMENT
  POST_COMMENT
  THREAD_COMMENT_THANKS
  POST_COMMENT_THANKS
  NEW_POST
}

enum MembershipSubscriptionType {
  MONTHLY
  QUARTERLY
  SEMIANNUALY
  ANNUALY
}
